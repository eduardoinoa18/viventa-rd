rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isElevated());
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && (request.auth.uid == userId || isElevated());
      allow delete: if isMasterAdmin();
    }

    match /listings/{listingId} {
      allow read: if true;
      allow create: if isAgentOrAbove();
      allow update: if isOwnerOrElevated();
      allow delete: if isOwnerOrElevated();
    }

    match /invites/{inviteId} {
      allow read: if true;
      allow create: if isElevated();
      allow update: if isElevated();
      allow delete: if isElevated();
    }

    match /{document=**} {
      allow read: if true;
    }

    function roleOf(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data.role;
    }
    function isAdmin() { return request.auth != null && roleOf(request.auth.uid) == 'admin'; }
    function isBrokerageAdmin() { return request.auth != null && roleOf(request.auth.uid) == 'brokerage_admin'; }
    function isMasterAdmin() { return request.auth != null && roleOf(request.auth.uid) == 'master_admin'; }
    function isElevated() { return isAdmin() || isBrokerageAdmin() || isMasterAdmin(); }
    function isAgentOrAbove() { return request.auth != null && (roleOf(request.auth.uid) in ['agent','admin','brokerage_admin','master_admin']); }
    function isOwnerOrElevated() { return request.auth != null && (resource.data.createdBy == request.auth.uid || isElevated()); }
  }
}
